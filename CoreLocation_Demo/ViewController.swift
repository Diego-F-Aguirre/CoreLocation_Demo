//
//  ViewController.swift
//  CoreLocation_Demo
//
//  Created by Diego Aguirre on 9/8/16.
//  Copyright Â© 2016 home. All rights reserved.
//

import UIKit
import CoreLocation

/* 
 Note that before running the app to get any kind of location information you must add either of the following two keys in the info.plist
 
 - NSLocationWhenInUseUsageDescription
 - NSLocationAlwaysUsageDescription
 
 Note that for the string value you'll add your custom string stating as to why you need to get access to the user's current location
 */

class ViewController: UIViewController {
    
    // A CLLocationManager is central to managing location information. Example tracking changes of a user's location
    var locationManager: CLLocationManager?
    // A CLLocation object represents the location data generated by a CLLocationManager object.
    var startLocation: CLLocation?

    override func viewDidLoad() {
        super.viewDidLoad()
        
        // initialize the CLLocationManager
        locationManager = CLLocationManager()
        // set the delegate of the manager
        locationManager?.delegate = self
        // set the accuracy of the location. Currently it's set to the best setting. The more accurate the more power it takes to use
        locationManager?.desiredAccuracy = kCLLocationAccuracyBest
        // You have to request authorization from the user. Normally this is done by pressing some kind of button for now we're going to request this right away
        locationManager?.requestWhenInUseAuthorization()
        
    }

}

extension ViewController: CLLocationManagerDelegate {
    // 2. To respond to any locations that come to us we implement the delegate function didUpdateLocations
    func locationManager(manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        // If we don't have a startLocation we'll get the first location update and use that as our start location
        if startLocation == nil {
            startLocation = locations.first
        } else {
            // Otherwise if we do have a startLocation we'll just grab the latest location
            guard let latest = locations.first else { return }
            // Let's find out how much distance there is from the first location to the current location
            let distanceInMeters = startLocation?.distanceFromLocation(latest)
            print("distance in meters: \(distanceInMeters)")
        }
    }
    
    // 1. Once the user gives permission to use location then we should start using them right away and the best place to use the location information is in the delegate function didChangeAuthorizationStatus
    func locationManager(manager: CLLocationManager, didChangeAuthorizationStatus status: CLAuthorizationStatus) {
        // We first want to check which Authorization status's are available to use.
        // it's best to check against both in case you change how authorize a user down the line
        if status == .AuthorizedWhenInUse || status == .AuthorizedAlways {
            locationManager?.startUpdatingLocation()
        }
    }
}

